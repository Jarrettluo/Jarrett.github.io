{"title":"基于百度云AI开发车型识别车牌识别案例详解","uid":"04b0e5a619aba169acfb000247466025","slug":"基于百度云AI开发车型识别车牌识别案例详解","date":"2021-09-30T14:24:18.000Z","updated":"2021-10-03T08:11:33.885Z","comments":true,"path":"api/articles/基于百度云AI开发车型识别车牌识别案例详解.json","keywords":null,"cover":"http://h2.ioliu.cn/bing/Italica_ZH-CN1692906751_1920x1080.jpg","content":"<p><strong>关键字： 车牌识别 车型识别 百度AI SpringBoot Vue Java SDK</strong></p>\n<p>@[toc]</p>\n<h4 id=\"1-创建百度AI应用\"><a href=\"#1-创建百度AI应用\" class=\"headerlink\" title=\"1.创建百度AI应用\"></a>1.创建百度AI应用</h4><hr>\n<p>进入百度AI官网<code>https://ai.baidu.com/</code>，点击右上角控制台，用百度账号登录。如果没有百度账号，需要首先创建一个百度账号。</p>\n<p>在控制台可以看到各种百度提供的AI应用接口。找到需要的应用接口，点进去可以创建一个相应的应用。</p>\n<p>图像识别提供一个组合API接口，支持多种垂类识别服务的灵活组合调用。</p>\n<p>然后会提供给该应用一个API Key 和Secret Key，它是我们调用接口必须的两个参数。</p>\n<p>以下是本次开发中用到的车型识别的应用。百度AI的车牌识别需要另外申请一个应用。需要注意的是不同的应用有不同的AppID等参数。</p>\n<p><img src=\"./%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E4%BA%91AI%E5%BC%80%E5%8F%91%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/100.png\" alt=\"创建的一个应用\"></p>\n<h4 id=\"2-通过Access-token密码调用百度AI接口（车型识别）\"><a href=\"#2-通过Access-token密码调用百度AI接口（车型识别）\" class=\"headerlink\" title=\"2.通过Access_token密码调用百度AI接口（车型识别）\"></a>2.通过Access_token密码调用百度AI接口（车型识别）</h4><hr>\n<p>车型识别功能检测图片中的车辆，识别具体车型，包括车辆品牌体型号、颜色、年份、位置信息。</p>\n<p>车辆识别为例。它的请求url为： <a href=\"https://aip.baidubce.com/rest/2.0/image-classify/v1/car\">https://aip.baidubce.com/rest/2.0/image-classify/v1/car</a></p>\n<p>调用方式一定为POST。同时我们要在后面添加以下参数：</p>\n<p><code>access_token</code>：即前面获取的密码</p>\n<p>在请求头中设置Content-Type参数</p>\n<p><code>Content-Type</code>：设置为application/x-www-form-urlencoded</p>\n<p>在请求体Body中设置image图片的信息参数</p>\n<p>1.<code>image</code>：图片信息参数，它是通过图片路径找到图片转为字节，然后经过Base64编码最后形成的字符串。如下代码</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F;获取图片的路径\nString filePath &#x3D; Path;\n\n&#x2F;&#x2F;将图片转为字节数组\nbyte[] imgData &#x3D; FileUtil.readFileByBytes(filePath);\n\n&#x2F;&#x2F;将图片字节数组转为Base64编码的字符串换\nString imgStr &#x3D; Base64Util.encode(imgData);\n\n&#x2F;&#x2F;将经过Base64编码的图片字符串转为UTF-8编码的字符串。可以直接传给image参数\nString imgParam &#x3D; URLEncoder.encode(imgStr, &quot;UTF-8&quot;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.<code>top_num</code>：设置返回的信息的数量，默认5，因为车辆识别会得出多个结果，按几率得到，我们可以获取前n个的数据</p>\n<p>3.<code>baike_num</code>：设置返回的百科的信息数，默认不返回</p>\n<h4 id=\"3-Java客户端AipImageClassifyClient调用AI接口\"><a href=\"#3-Java客户端AipImageClassifyClient调用AI接口\" class=\"headerlink\" title=\"3.Java客户端AipImageClassifyClient调用AI接口\"></a>3.Java客户端AipImageClassifyClient调用AI接口</h4><hr>\n<p>以上方法是采用接口直接调用，下面的方法是使用JAVA客户端进行访问。首先需要安装<strong>ImageClassify Java SDK</strong>，可以在官方网站下载Java SDK压缩工具包。</p>\n<p><img src=\"./%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E4%BA%91AI%E5%BC%80%E5%8F%91%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/102.png\" alt=\"百度AI的SDK下载页\"></p>\n<p>然后，新建<code>AipImageClassifyClient</code>，<code>AipImageClassifyClient</code>是图像识别的Java客户端，为使用图像识别的开发人员提供了一系列的交互方法。</p>\n<p>用户可以参考如下代码新建一个<code>AipImageClassifyClient</code>,初始化完成后建议单例使用,避免重复获取<code>access_token</code>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//设置APPID/AK/SK</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> APP_ID <span class=\"token operator\">=</span> <span class=\"token string\">\"你的 App ID\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"你的 Api Key\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> SECRET_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"你的 Secret Key\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 初始化一个AipImageClassifyClient</span>\n        <span class=\"token class-name\">AipImageClassifyClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AipImageClassifyClient</span><span class=\"token punctuation\">(</span>APP_ID<span class=\"token punctuation\">,</span> API_KEY<span class=\"token punctuation\">,</span> SECRET_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 可选：设置网络连接参数</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionTimeoutInMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">setSocketTimeoutInMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">60000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 可选：设置代理服务器地址, http和socket二选一，或者均不设置</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">setHttpProxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy_host\"</span><span class=\"token punctuation\">,</span> proxy_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置http代理</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">setSocketProxy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"proxy_host\"</span><span class=\"token punctuation\">,</span> proxy_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 设置socket代理</span>\n\n        <span class=\"token comment\">// 调用接口</span>\n        <span class=\"token class-name\">String</span> path <span class=\"token operator\">=</span> <span class=\"token string\">\"test.jpg\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">JSONObject</span> res <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">objectDetect</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面代码中，常量APP_ID在百度智能云控制台中创建，常量<code>API_KEY</code>与<code>SECRET_KEY</code>是在创建完毕应用后，系统分配给用户的，均为字符串，用于标识用户，为访问做签名验证，可在AI服务控制台中的应用列表中查看。</p>\n<h4 id=\"4-车型识别接口说明\"><a href=\"#4-车型识别接口说明\" class=\"headerlink\" title=\"4.车型识别接口说明\"></a>4.车型识别接口说明</h4><hr>\n<p>识别图片中车辆的具体车型，可识别常见的3000+款车型（小汽车为主），输出车辆的品牌型号、颜色、年份、位置信息；支持返回对应识别结果的百度百科词条信息，包含词条名称、百科页面链接、百科图片链接、百科内容简介。</p>\n<p>当前只支持单主体识别，若图片中有多个车辆，则识别目标最大的车辆。</p>\n<p>百度官方文档提供了调用的示例，提交参数的方式有本地路径和二进制数组。</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">public void sample(AipImageClassify client) &#123;\n    &#x2F;&#x2F; 传入可选参数调用接口\n    HashMap&lt;String, String&gt; options &#x3D; new HashMap&lt;String, String&gt;();\n    options.put(&quot;top_num&quot;, &quot;3&quot;);\n    options.put(&quot;baike_num&quot;, &quot;5&quot;);\n\n\n    &#x2F;&#x2F; 参数为本地路径\n    String image &#x3D; &quot;test.jpg&quot;;\n    JSONObject res &#x3D; client.carDetect(image, options);\n    System.out.println(res.toString(2));\n\n    &#x2F;&#x2F; 参数为二进制数组\n    byte[] file &#x3D; readFile(&quot;test.jpg&quot;);\n    res &#x3D; client.carDetect(file, options);\n    System.out.println(res.toString(2));\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>车型识别 请求参数详情</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>是否必选</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>image</td>\n<td>是</td>\n<td>mixed</td>\n<td>-</td>\n<td>本地图片路径或者图片二进制数据</td>\n</tr>\n<tr>\n<td>top_num</td>\n<td>否</td>\n<td>String</td>\n<td>5</td>\n<td>返回预测得分top结果数，默认为5</td>\n</tr>\n<tr>\n<td>baike_num</td>\n<td>否</td>\n<td>String</td>\n<td>0</td>\n<td>返回百科信息的结果数，默认不返回</td>\n</tr>\n</tbody></table>\n<p><strong>车型识别 返回数据参数详情</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>是否必选</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>log_id</td>\n<td>是</td>\n<td>uint64</td>\n<td>唯一的log id，用于问题定位</td>\n</tr>\n<tr>\n<td>color_result</td>\n<td>是</td>\n<td>string</td>\n<td>车身颜色</td>\n</tr>\n<tr>\n<td>result</td>\n<td>是</td>\n<td>car-result()</td>\n<td>车型识别结果数组</td>\n</tr>\n<tr>\n<td>+name</td>\n<td>是</td>\n<td>string</td>\n<td>车型名称，示例：宝马x6</td>\n</tr>\n<tr>\n<td>+score</td>\n<td>是</td>\n<td>double</td>\n<td>置信度，取值范围0-1，示例：0.5321</td>\n</tr>\n<tr>\n<td>+year</td>\n<td>是</td>\n<td>string</td>\n<td>年份</td>\n</tr>\n<tr>\n<td>+baike_info</td>\n<td>否</td>\n<td>object</td>\n<td>对应识别结果的百科词条名称</td>\n</tr>\n<tr>\n<td>++baike_url</td>\n<td>否</td>\n<td>string</td>\n<td>对应识别结果百度百科页面链接</td>\n</tr>\n<tr>\n<td>++image_url</td>\n<td>否</td>\n<td>string</td>\n<td>对应识别结果百科图片链接</td>\n</tr>\n<tr>\n<td>++description</td>\n<td>否</td>\n<td>string</td>\n<td>对应识别结果百科内容描述</td>\n</tr>\n<tr>\n<td>location_result</td>\n<td>是</td>\n<td>string</td>\n<td>车辆在图片中的位置信息</td>\n</tr>\n<tr>\n<td>+width</td>\n<td>是</td>\n<td>float</td>\n<td>车辆区域的宽度</td>\n</tr>\n<tr>\n<td>+height</td>\n<td>是</td>\n<td>float</td>\n<td>车辆区域的高度</td>\n</tr>\n<tr>\n<td>+left</td>\n<td>是</td>\n<td>float</td>\n<td>车辆区域离左边界的距离</td>\n</tr>\n<tr>\n<td>+top</td>\n<td>是</td>\n<td>float</td>\n<td>车辆区域离上边界的距离</td>\n</tr>\n</tbody></table>\n<p><strong>车型识别 返回示例</strong></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"log_id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4086212218842203806</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"location_result\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"width\"</span><span class=\"token operator\">:</span> <span class=\"token number\">447</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token number\">226</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token number\">209</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token number\">188</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"result\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"baike_info\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token property\">\"baike_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://baike.baidu.com/item/%E5%B8%83%E5%8A%A0%E8%BF%AAChiron/20419512\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"布加迪Chiron是法国跑车品牌布加迪出品的豪华超跑车。配置四涡轮增压发动机，420 公里每小时，有23种颜色的选择，售价高达260万美元。\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.98793351650238</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"布加迪Chiron\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"无年份信息\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.0021970034576952</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"奥迪RS5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2011-2017\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.0021096928976476</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"奥迪RS4\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"无年份信息\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.0015581247862428</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"奥迪RS7\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2014-2016\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"score\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.00082337751518935</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"布加迪威航\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"year\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2004-2015\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"color_result\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"颜色无法识别\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>车型识别的错误码可见：<a href=\"https://ai.baidu.com/ai-doc/VEHICLE/Gk3hb3ifo\">https://ai.baidu.com/ai-doc/VEHICLE/Gk3hb3ifo</a></p>\n<p><strong>⚠</strong> 车牌识别的调用方式和以上车型识别的方式大同小异，这里略过。</p>\n<h4 id=\"5-Java后端Controller层接收图片\"><a href=\"#5-Java后端Controller层接收图片\" class=\"headerlink\" title=\"5.Java后端Controller层接收图片\"></a>5.Java后端Controller层接收图片</h4><hr>\n<p>本次开发的后端应用基于SpringBoot v2.4.1，Controller层的开发内容如下所示。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * @Author Jarrett Luo\n * @Date 2021/1/28 18:26\n * @Version 1.0\n */</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/recognition\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecognitionController</span> <span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token class-name\">RecognitionService</span> recognitionService<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@CrossOrigin</span>\n    <span class=\"token annotation punctuation\">@PostMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ApiResult</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">MultipartFile</span> multipartFile<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> imgBytes <span class=\"token operator\">=</span> multipartFile<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>imgBytes<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> recognitionService<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>imgBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">ApiResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"数据为空!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>byte[] imgBytes = multipartFile.getBytes();</code>将前端传递的数据转换为二进制数组，以便于后面进行调用。</p>\n<p>必须进行非空判断后才能进入下一步，否则会出现没有返回值的错误。ApiResult是自己写的一个工具，用于返回结果，如果传入的空数据，则返回201的错误码。</p>\n<h4 id=\"6-Java后端Service层访问AI接口\"><a href=\"#6-Java后端Service层访问AI接口\" class=\"headerlink\" title=\"6.Java后端Service层访问AI接口\"></a>6.Java后端Service层访问AI接口</h4><hr>\n<p>根据百度AI控制页创建的应用，设置每个应用的<code>APP_ID</code>, <code>API_KEY</code>, <code>SECRET_KEY</code>。这里需要注意的是百度AI提交的不同接口需要创建不同的应用。</p>\n<p>我们对文件的大小进行了限制，这里仅处理10MB以下的图片。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ApiResult</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> image<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">10048575</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">ApiResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"文件过大！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 初始化一个AipOcr</span>\n        <span class=\"token class-name\">AipOcr</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AipOcr</span><span class=\"token punctuation\">(</span>APP_ID<span class=\"token punctuation\">,</span> API_KEY<span class=\"token punctuation\">,</span> SECRET_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">JSONObject</span> res <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">plateLicense</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> number<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"words_result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">JSONObject</span> jsonData <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"words_result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            number <span class=\"token operator\">=</span> jsonData<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            number <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 初始化一个AipImageClassify</span>\n        <span class=\"token class-name\">AipImageClassify</span> client1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AipImageClassify</span><span class=\"token punctuation\">(</span>APP_ID_1<span class=\"token punctuation\">,</span> API_KEY_1<span class=\"token punctuation\">,</span> SECRET_KEY_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 传入可选参数调用接口</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> options1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        options<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"top_num\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 参数为本地路径</span>\n        <span class=\"token class-name\">JSONObject</span> res1 <span class=\"token operator\">=</span> client1<span class=\"token punctuation\">.</span><span class=\"token function\">carDetect</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> options1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> color<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> year<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">JSONArray</span> jsonData <span class=\"token operator\">=</span> res1<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">JSONObject</span> vehicle <span class=\"token operator\">=</span> jsonData<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取数组第一个元素</span>\n            year <span class=\"token operator\">=</span> vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            name <span class=\"token operator\">=</span> vehicle<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            color <span class=\"token operator\">=</span> res1<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color_result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无年份信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                year <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"非车类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无车辆颜色信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                color <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            year <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            color <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token class-name\">RecognitionDTO</span> recognitionDTO <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RecognitionDTO</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span>\n                name<span class=\"token punctuation\">,</span>\n                year<span class=\"token punctuation\">,</span>\n                color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ApiResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>recognitionDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意以上代码的ApiResult是自己写的一个结果转换的工具类。关于ApiResult的详细内容可以查看作者github的详细介绍。</p>\n<h4 id=\"7-基于VUE的前端开发车牌识别和车型识别\"><a href=\"#7-基于VUE的前端开发车牌识别和车型识别\" class=\"headerlink\" title=\"7.基于VUE的前端开发车牌识别和车型识别\"></a>7.基于VUE的前端开发车牌识别和车型识别</h4><hr>\n<p>根据开发需求，在页面中增加一个拍照自动识别按钮，用户点击按钮后可以选择拍照或者相册中的照片。相应的HTML代码如下所示。</p>\n<p><img src=\"./%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E4%BA%91AI%E5%BC%80%E5%8F%91%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/103.png\" alt=\"前端页面\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 图片拍照识别上传\n * @author: 罗佳瑞\n */</span>\n<span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> inputDOM <span class=\"token operator\">=</span> that<span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>imageInput<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> file <span class=\"token operator\">=</span> inputDOM<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">uploadImage</span><span class=\"token punctuation\">(</span>formData<span class=\"token punctuation\">)</span>\n\n    Indicator<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        text<span class=\"token operator\">:</span> <span class=\"token string\">'识别中...'</span><span class=\"token punctuation\">,</span>\n        spinnerType<span class=\"token operator\">:</span> <span class=\"token string\">'fading-circle'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n        Indicator<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">15000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下是采用异步方式提交数据到后台服务器，提交数据的函数时<code>recorgnizeRequest</code>。如果成功返回数据该函数将回调<code>uploadImageResult</code>，关于该回调函数下文将会介绍。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">/**\n* 异步提交数据到后台\n* @author: 罗佳瑞\n*/</span>\n<span class=\"token keyword\">async</span> <span class=\"token function\">uploadImage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">formData</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">await</span> vehiclePageRequest<span class=\"token punctuation\">.</span><span class=\"token function\">recorgnizeRequest</span><span class=\"token punctuation\">(</span>formData<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">uploadImageResult</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">Toast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>采用<code>axios</code>提交数据到相应的URL。VUE中采用<code>Promise</code>提交数据，采用这种方式提交更好的看到提交成功和识别的结果。特别要注意，为了避免axios对formdata进行转换，因此最好加上<code>tansformRequest</code>。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function recorgnizeRequest(FormData) &#123;\n    return new Promise((resolve, reject) &#x3D;&gt; &#123;\n        axios(&#123;\n            url: RECORGNIZE_URL,\n            method: &#39;POST&#39;,\n            headers: &#123;\n                &#39;Content-Type&#39;: &quot;multipart&#x2F;form-data&quot;,\n                &#x2F;&#x2F; token: sessionStorage.getItem(&#39;token&#39;)\n            &#125;,\n            &#x2F;&#x2F;这部分非常重要，否则formdata会被转格式\n            transformRequest: [function()&#123;\n                return FormData;\n            &#125;],\n            params: &#123;&#125;,\n            data: FormData,\n        &#125;)\n        .then((res) &#x3D;&gt; &#123;\n            &#x2F;&#x2F; 成功\n            resolve(res.data)\n        &#125;)\n        .catch((res) &#x3D;&gt; &#123;\n            &#x2F;&#x2F; 失败\n            reject(res)\n        &#125;)\n    &#125;)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>后端返回的数据采用如下代码映射到表单中。由于返回的结果中可能没有识别到车辆，或者图片中没有车辆信息，因此在这一步进行非空判断。</p>\n<p><code>Indicator</code>是前端框架的指示器，用于告知用户当前识别进度以及识别结果。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">uploadImageResult(res) &#123;\n    if(res.code&#x3D;&#x3D;200) &#123;\n        var recorgnizeResult &#x3D; res.data\n        var rln &#x3D; recorgnizeResult.licenseNumber\n        var rvb &#x3D; recorgnizeResult.name\n        var rvc &#x3D; recorgnizeResult.color;\n        var rvy &#x3D; recorgnizeResult.year;\n\n        var resultStr &#x3D; &quot;&quot;;\n        if(rln!&#x3D;null)&#123;\n            this.vehicleInfo.vehiclePlate &#x3D; rln;\n            resultStr &#x3D; resultStr + &quot;车牌可能是：&quot; + rln + &quot;;\\n&quot;\n        &#125;\n        if(rvb!&#x3D;null) &#123;\n            this.vehicleInfo.vehicleBrand &#x3D; rvb;\n            resultStr &#x3D; resultStr + &quot;品牌可能是：&quot; + rvb + &quot;;\\n&quot;\n        &#125;\n\n        if(rvc!&#x3D;null) &#123;\n            this.vehicleInfo.vehicleColor &#x3D; rvc;\n            resultStr &#x3D; resultStr + &quot;颜色可能是：&quot; + rvc + &quot;;\\n&quot;\n        &#125;\n        if(rvy!&#x3D;null) &#123;\n            var rvyFormat &#x3D; rvy.substr(0,4)\n            resultStr &#x3D; resultStr + &quot;年代可能是：&quot; + rvyFormat + &quot;年;\\n&quot;\n        &#125;\n\n        Indicator.close();\n        Indicator.open(&#123;\n            text: &quot;识别成功\\n&quot; + resultStr,\n            spinnerType: &#39;fading-circle&#39;\n        &#125;);\n        setTimeout(()&#x3D;&gt;&#123;\n            Indicator.close();\n        &#125;,7500)\n\n    &#125;else&#123;\n        Toast(&#123;\n            message: &quot;连接超时！&quot;\n        &#125;)\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>前端页面开发结果如下。用户点击<strong>拍照自动识别</strong>后，选择拍照或者相册，提交照片等待返回结果。</p>\n<p>服务器返回的结果会自动输入到下图中的车牌号，汽车品牌，车身颜色。</p>\n<p><img src=\"./%E5%9F%BA%E4%BA%8E%E7%99%BE%E5%BA%A6%E4%BA%91AI%E5%BC%80%E5%8F%91%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB%E6%A1%88%E4%BE%8B%E8%AF%A6%E8%A7%A3/104.png\" alt=\"最终效果图\"></p>\n<h4 id=\"8-总结与展望\"><a href=\"#8-总结与展望\" class=\"headerlink\" title=\"8.总结与展望\"></a>8.总结与展望</h4><hr>\n<ul>\n<li><p>本文从访问百度AI接口出发，详细阐述了后端如何调用百度接口，实现一次图片上传得到车牌识别和车型识别的结果。</p>\n</li>\n<li><p>本文的前端开发作为示例，提供了一种思路，更多的如客户端，安卓，IOS应用等等都可以采用如此方法开发。</p>\n</li>\n<li><p>采用百度AI提供的接口，可以拓展更多丰富的应用；多种接口的叠加让用户一次上传便得到多种结果。</p>\n</li>\n<li><p>通过成熟的AI算法，识别的准确度和速度都比较令人满意。</p>\n</li>\n<li><p>以上过程中存在的不足是，由于用户拍照后直接上传的图片是比较大的，导致在传输过程中比较慢，甚至会出现超时的情况，用户体验不够好。改进的方法是前端页面首先对大文件进行压缩后再上传。</p>\n</li>\n<li><p>百度AI提供了组合调用AI的方式，前端可以采用该种方式发起请求。在此应用中需要保存用户的图片，因此没有采用该方式。</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果您觉得上面的内容对您有帮助欢迎点赞、评论、转发！<br>更多内容请查阅作者博客：<a href=\"https://jiaruiblog.com/\">https://jiaruiblog.com</a><br>或者<code>star</code>作者github: <a href=\"https://github.com/Jarrettluo?tab=repositories\">https://github.com/Jarrettluo?tab=repositories</a></p></blockquote>\n","text":"关键字： 车牌识别 车型识别 百度AI SpringBoot Vue Java SDK @[toc] 1.创建百度AI应用 进入百度AI官网https://ai.baidu.com/，点击右上角控制台，用百度账号登录。如果没有百度账号，需要首先创建一个百度账号。 在控制台可以看到...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"应用案例","slug":"应用案例","count":1,"path":"api/categories/应用案例.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"},{"name":"Api","slug":"Api","count":1,"path":"api/tags/Api.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%88%9B%E5%BB%BA%E7%99%BE%E5%BA%A6AI%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">1.创建百度AI应用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%80%9A%E8%BF%87Access-token%E5%AF%86%E7%A0%81%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6AI%E6%8E%A5%E5%8F%A3%EF%BC%88%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB%EF%BC%89\"><span class=\"toc-text\">2.通过Access_token密码调用百度AI接口（车型识别）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Java%E5%AE%A2%E6%88%B7%E7%AB%AFAipImageClassifyClient%E8%B0%83%E7%94%A8AI%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">3.Java客户端AipImageClassifyClient调用AI接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">4.车型识别接口说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-Java%E5%90%8E%E7%AB%AFController%E5%B1%82%E6%8E%A5%E6%94%B6%E5%9B%BE%E7%89%87\"><span class=\"toc-text\">5.Java后端Controller层接收图片</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-Java%E5%90%8E%E7%AB%AFService%E5%B1%82%E8%AE%BF%E9%97%AEAI%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">6.Java后端Service层访问AI接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E5%9F%BA%E4%BA%8EVUE%E7%9A%84%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%BD%A6%E7%89%8C%E8%AF%86%E5%88%AB%E5%92%8C%E8%BD%A6%E5%9E%8B%E8%AF%86%E5%88%AB\"><span class=\"toc-text\">7.基于VUE的前端开发车牌识别和车型识别</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#8-%E6%80%BB%E7%BB%93%E4%B8%8E%E5%B1%95%E6%9C%9B\"><span class=\"toc-text\">8.总结与展望</span></a></li></ol>","author":{"name":"JIARUI's BLOG","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17515212?s=400&u=3dc2bbf2e6239369be5c37d357699a46d94404c9&v=4","link":"/","description":"数据应用大师Master <br /> <b>谋时而动 顺势而为</b>","socials":{"github":"https://github.com/Jarrettluo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/luo-jia-rui","csdn":"https://blog.csdn.net/JarrettLuo","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"UML建模工具PlantUML的使用办法","uid":"f9f8ad73583ebb207dcfcb73d78ba8ed","slug":"UML建模工具PlantUML的使用办法","date":"2021-09-30T14:29:49.000Z","updated":"2021-09-30T14:31:58.798Z","comments":true,"path":"api/articles/UML建模工具PlantUML的使用办法.json","keywords":null,"cover":[],"text":" UML(Unified modeling language) 是统一建模语言或者标准建模语言。通过使用 UML 的面向对象图的方式，可以更明确、清晰的表达项目中的架设思想、项目结构、执行顺序等一些逻辑思维。 1.在VScode中使用PlantUML首先在VScode中安装插件p...","link":"","photos":[],"count_time":{"symbolsCount":918,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"JIARUI's BLOG","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17515212?s=400&u=3dc2bbf2e6239369be5c37d357699a46d94404c9&v=4","link":"/","description":"数据应用大师Master <br /> <b>谋时而动 顺势而为</b>","socials":{"github":"https://github.com/Jarrettluo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/luo-jia-rui","csdn":"https://blog.csdn.net/JarrettLuo","juejin":"","customs":{}}}},"next_post":{"title":"Swagger与RestFul集成并导入Postman测试","uid":"09ee25fa4eddcb001db0d1eba194cd72","slug":"Swagger与RestFul集成并导入Postman测试","date":"2021-09-30T14:21:10.000Z","updated":"2021-09-30T14:23:25.237Z","comments":true,"path":"api/articles/Swagger与RestFul集成并导入Postman测试.json","keywords":null,"cover":[],"text":"使用教程：Springboot + Swagger3 集成和配置 maven依赖&lt;dependencies> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>s...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"author":{"name":"JIARUI's BLOG","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17515212?s=400&u=3dc2bbf2e6239369be5c37d357699a46d94404c9&v=4","link":"/","description":"数据应用大师Master <br /> <b>谋时而动 顺势而为</b>","socials":{"github":"https://github.com/Jarrettluo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/luo-jia-rui","csdn":"https://blog.csdn.net/JarrettLuo","juejin":"","customs":{}}}}}