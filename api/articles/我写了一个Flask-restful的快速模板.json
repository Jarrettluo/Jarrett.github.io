{"title":"我写了一个Flask-restful的快速模板","uid":"2a565706375e8204a992e2f354c7a89e","slug":"我写了一个Flask-restful的快速模板","date":"2021-11-14T06:13:45.000Z","updated":"2021-11-14T06:29:45.126Z","comments":true,"path":"api/articles/我写了一个Flask-restful的快速模板.json","keywords":null,"cover":"http://h2.ioliu.cn/bing/Neowise_ZH-CN1308687945_1920x1080.jpg","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前几天在进行项目开发的时候，发现用Flask写一些轻量化的Web程序还是比较合适的。其实在Flask家族中，为了能够更加方便的开发Restful风格的接口，Flask-restful是一个不错的选择。虽然Flask-restful提供了比较完整的官方文档，但是距离开发上线项目还是不是很方便，因此我写了一个Flask-restful的快速模板。</p>\n<p>此项目采用Mysql作为持久层数据库，实现了一个资源的5个接口，满足基本的web开发需求。</p>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p>首先给出项目地址：<a href=\"https://github.com/Jarrettluo/flask-restful-quick-start\">Flask-restful-quick-start</a><br><img src=\"./%E6%88%91%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AAFlask-restful%E7%9A%84%E5%BF%AB%E9%80%9F%E6%A8%A1%E6%9D%BF/01.png\" alt=\"image-20211113211211982.png\"></p>\n<h2 id=\"项目简介\"><a href=\"#项目简介\" class=\"headerlink\" title=\"项目简介\"></a>项目简介</h2><h4 id=\"首先是项目的文件结构。\"><a href=\"#首先是项目的文件结构。\" class=\"headerlink\" title=\"首先是项目的文件结构。\"></a>首先是项目的文件结构。</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">├── flask_app\n│   ├── common\n│   │   ├── __init__.py\n│   │   └── utils.py\n│   ├── user\n│   │   ├── __init__.py\n│   │   ├── models.py\n│   │   └── views.py\n│   └── __init__.py\n├── config.py\n├── LICENSE\n├── main.py\n└── requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>项目中采用了蓝图来划分功能块，方面划分项目模块，并且提升可维护性。</p>\n<p>目前我认为这是一个相对比较科学的文件组织方案了。</p>\n<h4 id=\"Restful接口设计\"><a href=\"#Restful接口设计\" class=\"headerlink\" title=\"Restful接口设计\"></a>Restful接口设计</h4><p>基本的接口从两个路由进行接收</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n请求方法\t\t路由\t\t\t\t请求内容\nPOST\t\t&#x2F;userList\t\t\tuserInfo\nGET\t\t\t&#x2F;userList\t\t\tNone\nGET\t\t\t&#x2F;user\t\t\t\tuserId\nPUT\t\t\t&#x2F;user\t\t\t\tuserInfo\nDELETE\t\t&#x2F;user\t\t\t\tuserId\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>做一个简单的介绍就是增加资源和查询全部资源从资源列表接口走。</p>\n<p>其他的带参数请求和修改、删除等从专门的资源接口走。</p>\n<p>这样就能避免GET请求带参数和不带参数的问题了。</p>\n<h4 id=\"在项目中统一的处理能够提升可靠性，降低编码错误，我这里对两点进行了统一。\"><a href=\"#在项目中统一的处理能够提升可靠性，降低编码错误，我这里对两点进行了统一。\" class=\"headerlink\" title=\"在项目中统一的处理能够提升可靠性，降低编码错误，我这里对两点进行了统一。\"></a>在项目中统一的处理能够提升可靠性，降低编码错误，我这里对两点进行了统一。</h4><p>1、Sqlalchemy的Model层对象和dict之间的转换。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">row2dict</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    参考文档 https://stackoverflow.com/questions/1958219/convert-sqlalchemy-row-object-to-python-dict\n    将model转换为dict\n    :param row: Sqlalchemy model\n    :return: 输出的字典\n    \"\"\"</span>\n    out_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> column <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">.</span>__table__<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">:</span>\n        out_dict<span class=\"token punctuation\">[</span>column<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> column<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> out_dict\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以上代码即可轻松地将model转换为dict的字典了。</p>\n<p>2、统一的回复内容</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseResponse</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>result_code_success <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n        self<span class=\"token punctuation\">.</span>result_code_fail <span class=\"token operator\">=</span> <span class=\"token number\">201</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">=</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>result_code_success<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token operator\">=</span><span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string\">\"code\"</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>result_code_fail<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> data\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>统一的回复内容包括了“成功”和“失败”两种情况，可自定义回复编码和内容。</p>\n<h2 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先克隆本项目</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ git clone git@github.com:Jarrettluo&#x2F;flask-restful-quick-start.git\n\ncd flask-restful-quick-start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>建议大家使用ide创建一个虚拟环境venv，避免项目使用的包与系统包不一致。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ pip install requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后启动项目，开始开发</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ python run main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><p>在项目中的__init__.py中设置了连接数据库的各项参数，这些都是需要来自定义设置的。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">user <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span>\npassword <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span>\ndatabase <span class=\"token operator\">=</span> <span class=\"token string\">\"flask_quick\"</span> <span class=\"token comment\"># 需要修改的内容</span>\napp<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"SQLALCHEMY_DATABASE_URI\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mysql://%s:%s@localhost:3306/%s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> database<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在这里使用了MysqlDB，可以根据实际情况，进行修改。</p>\n<p>同时也强烈建议大家将这些设置信息放到config.py文件中，这样方便统一修改。</p>\n<p>在主程序中，防止了一个数据库初始化的方法，可以进行数据库的清空和创建。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">init_db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 丢掉全部表</span>\n    db<span class=\"token punctuation\">.</span>drop_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 创建全部表</span>\n    db<span class=\"token punctuation\">.</span>create_all<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"快速开发\"><a href=\"#快速开发\" class=\"headerlink\" title=\"快速开发\"></a>快速开发</h3><p>增加模块就只需要将现有的user模块复制以后进行修改即可。</p>\n<p>在flask_app.__init.py中注册蓝图</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask_app<span class=\"token punctuation\">.</span>user <span class=\"token keyword\">import</span> user_blueprint\napp<span class=\"token punctuation\">.</span>register_blueprint<span class=\"token punctuation\">(</span>user_blueprint<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在flask_app.user.__init.py中增加蓝图</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">user_blueprint <span class=\"token operator\">=</span> Blueprint<span class=\"token punctuation\">(</span><span class=\"token string\">\"user_blueprint\"</span><span class=\"token punctuation\">,</span> __name__<span class=\"token punctuation\">,</span> url_prefix<span class=\"token operator\">=</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> flask_app<span class=\"token punctuation\">.</span>user <span class=\"token keyword\">import</span> views<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>enjoy。</p>\n<h3 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h3><p>纯新手向的指导，更多的内容请参考Flask_restful的<a href=\"http://www.pythondoc.com/Flask-RESTful/quickstart.html\">官方文档</a>.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果您觉得上面的内容对您有帮助欢迎点赞、评论、转发！<br>更多内容请查阅作者博客：<a href=\"https://links.jianshu.com/go?to=https://jiaruiblog.com/\">https://jiaruiblog.com</a><br>或者<code>star</code>作者github: <a href=\"https://links.jianshu.com/go?to=https://github.com/Jarrettluo?tab=repositories\">https://github.com/Jarrettluo?tab=repositories</a></p></blockquote>\n","feature":true,"text":"前言前几天在进行项目开发的时候，发现用Flask写一些轻量化的Web程序还是比较合适的。其实在Flask家族中，为了能够更加方便的开发Restful风格的接口，Flask-restful是一个不错的选择。虽然Flask-restful提供了比较完整的官方文档，但是距离开发上线项目...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Mysql","slug":"Mysql","count":2,"path":"api/tags/Mysql.json"},{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"},{"name":"Flask","slug":"Flask","count":1,"path":"api/tags/Flask.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">项目地址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">项目简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E6%98%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E3%80%82\"><span class=\"toc-text\">首先是项目的文件结构。</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Restful%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">Restful接口设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%BB%9F%E4%B8%80%E7%9A%84%E5%A4%84%E7%90%86%E8%83%BD%E5%A4%9F%E6%8F%90%E5%8D%87%E5%8F%AF%E9%9D%A0%E6%80%A7%EF%BC%8C%E9%99%8D%E4%BD%8E%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E5%AF%B9%E4%B8%A4%E7%82%B9%E8%BF%9B%E8%A1%8C%E4%BA%86%E7%BB%9F%E4%B8%80%E3%80%82\"><span class=\"toc-text\">在项目中统一的处理能够提升可靠性，降低编码错误，我这里对两点进行了统一。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">启动项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">修改配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">快速开发</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%B0%BE\"><span class=\"toc-text\">结尾</span></a></li></ol></li></ol>","author":{"name":"JIARUI's BLOG","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17515212?s=400&u=3dc2bbf2e6239369be5c37d357699a46d94404c9&v=4","link":"/","description":"数据应用大师Master <br /> <b>谋时而动 顺势而为</b>","socials":{"github":"https://github.com/Jarrettluo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/luo-jia-rui","csdn":"https://blog.csdn.net/JarrettLuo","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"mm-wiki的packets.go:36: unexpected EOF解决","uid":"62d76556d121d2872e8a9782563ea5e2","slug":"mm-wiki的packets-go-36-unexpected-EOF解决","date":"2021-11-14T06:10:32.000Z","updated":"2021-11-14T06:24:50.805Z","comments":true,"path":"api/articles/mm-wiki的packets-go-36-unexpected-EOF解决.json","keywords":null,"cover":"http://h2.ioliu.cn/bing/YorkMinster_ZH-CN3129176050_1920x1080.jpg","text":"背景MM-Wiki 是一个轻量级的企业知识分享与团队协同软件，可用于快速构建企业 Wiki 和团队知识分享平台。部署方便，使用简单，帮助团队构建一个信息共享、文档管理的协作环境。https://github.com/phachon/mm-wiki 某天服务器磁盘满了以后，出现已经...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"debug","slug":"debug","count":2,"path":"api/categories/debug.json"}],"tags":[{"name":"go","slug":"go","count":1,"path":"api/tags/go.json"}],"author":{"name":"JIARUI's BLOG","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17515212?s=400&u=3dc2bbf2e6239369be5c37d357699a46d94404c9&v=4","link":"/","description":"数据应用大师Master <br /> <b>谋时而动 顺势而为</b>","socials":{"github":"https://github.com/Jarrettluo","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"https://www.zhihu.com/people/luo-jia-rui","csdn":"https://blog.csdn.net/JarrettLuo","juejin":"","customs":{}}},"feature":true}}